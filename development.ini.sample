[app:main]
use = egg:autonomie_celery

pyramid.default_locale_name = fr_FR
pyramid.includes =
                    pyramid_tm
                    pyramid_mailer
                    pyramid_celery

####  MAIL FROM WITHIN THE APPLICATION ####
# Add this one to pyramid.includes if you configured a mailbox
mail.host = mysmtp
mail.port=587
mail.username=<mailbox>
mail.password=<mailbox_password>
mail.tls=True
mail.default_sender=<mailbox>
mail.optout_address=<optout_address>
mail.bounce_url=<bound_address>

#### DATABASE ACCESS CONFIGURATION ####
sqlalchemy.url = mysql://autonomie:autonomie@localhost/autonomie?charset=utf8
sqlalchemy.encoding=UTF8
# Those variables should be improved to fit your configuration
sqlalchemy.pool_recycle=7200
sqlalchemy.pool_size=100

# Cache configuration used for file caching
cache.data_dir = %(here)s/data/cache/data
cache.regions = default_term, second, short_term, long_term
cache.type = file
cache.second.expire = 1
cache.short_term.expire = 60
cache.default_term.expire = 1
cache.long_term.expire = 20

# Path where we store asynchronously generated files
autonomie.static_tmp=/tmp/
# The instance name
autonomie.instance_name=intranet.local.fr

[celery]
BROKER_URL = redis://localhost:6379/0
CELERY_IMPORTS =
    autonomie_celery.tasks.task
    autonomie_celery.tasks.export
    autonomie_celery.schedulers

CELERY_TASK_SERIALIZER = json
#CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_ACCEPT_CONTENT= json
                       yaml

[server:main]
use = egg:waitress#main
host = 0.0.0.0
#host= 0.0.0.0
port = 8080

[pshell]
models = autonomie_celery.models
db=autonomie_base.models.base.DBSESSION
transaction=transaction

# Begin logging configuration
[loggers]
keys = root, sqlalchemy, celery

[handlers]
keys = console, file, sqlfile, celery_file

[formatters]
keys = generic, sqlfile

[logger_root]
level = DEBUG
handlers = file, console
propagate = 0

[logger_sqlalchemy]
level = INFO
handlers = file, sqlfile
qualname = sqlalchemy.engine
propagate=0
# level = INFO logs SQL queries.
# level = DEBUG logs SQL queries and results.
# level = WARN logs neither. (Recommended for production systems.)

[logger_celery]
level=DEBUG
handlers = celery_file, console
propagate=1
qualname = celery

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('logfile.log','a')
level = DEBUG
formatter = generic

[handler_celery_file]
class = FileHandler
args = ('celery.log','a')
level = DEBUG
formatter = generic

[handler_sqlfile]
class = FileHandler
args = ('sql.log','a')
level = DEBUG
formatter = sqlfile

[formatter_sqlfile]
format = %(message)s

[formatter_generic]
format = %(asctime)-15s %(levelname)-5.5s %(message)s ([%(name)s.%(funcName)s:%(lineno)d])
# End logging configuration
